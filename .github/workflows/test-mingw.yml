name: Windows GNU-like Environment Tests

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  mingw_test:
    name: Test on MinGW ${{ matrix.target_arch }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target_arch: x86_64-pc-windows-gnu
            rust_spec: stable-x86_64-pc-windows-gnu
          - target_arch: x86_64-pc-windows-gnullvm
            rust_spec: stable-x86_64-pc-windows-gnullvm

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # For gnullvm, LLVM/Clang should be available on windows-latest or installed by Rust.
      # If linker issues arise for gnullvm, ensure LLVM is in PATH.
      # (e.g., by using 'choco install llvm' or ensuring it's picked up from VS installation.)

      - name: Install Rust toolchain (stable for ${{ matrix.target_arch }})
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target_arch }}
          override: true
          default: true

      - name: Cargo Check (${{ matrix.target_arch }})
        run: cargo check --target ${{ matrix.target_arch }}

      - name: Cargo Test (${{ matrix.target_arch }})
        run: cargo test --target ${{ matrix.target_arch }}

  msys_test:
    name: Test on MSYS ${{ matrix.target_arch }}
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0} # Use MSYS2 shell for 'run:' steps in this job
    strategy:
      fail-fast: false
      matrix:
        include:
          - target_arch: x86_64-pc-windows-gnu
            rust_spec: stable-x86_64-pc-windows-gnu
          - target_arch: x86_64-pc-windows-gnullvm
            rust_spec: stable-x86_64-pc-windows-gnullvm

    steps:
      - name: Set up MSYS2 environment
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64 # Or UCRT64 / CLANG64 depending on toolchain/library needs
          update: true
          pacboy: >-
            git:
            clang:p
            cmake:p
            ninja:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # The actions-rs/toolchain action uses rustup, which typically manages its own environment.
      # It should generally work fine even if the default shell for 'run' steps is msys2.
      - name: Install Rust toolchain (stable for ${{ matrix.target_arch }})
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target_arch }}
          override: true
          default: true

      - name: Cargo Check (${{ matrix.target_arch }})
        # This 'run' step will use the msys2 shell due to job defaults.
        run: cargo check --target ${{ matrix.target_arch }}

      - name: Cargo Test (${{ matrix.target_arch }})
        # This 'run' step will use the msys2 shell.
        run: cargo test --target ${{ matrix.target_arch }}